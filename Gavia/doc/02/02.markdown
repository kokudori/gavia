---
out: store-fn-bound.html
---

# bound

`lower <= key <= upper`となるオブジェクトを全て取得。

<a href="store-fn-boundThan.html">boundThan</a>とは違い、境界を**含む**。

## シグネチャ
```
deferred = gaviaStoreObject.bound(lower, upper, {
	direction: Gavia.Store.direction,  // optional
	index: 'indexName',                // optional
	offset: Number,                    // optional
	limit: Number,                     // optional
	count: Boolean                     // optional
});
```

## パラメータ
<table class="report">
	<thead>
		<tr>
			<th>名前</th>
			<th>概要</th>
			<th>デフォルト値</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>direction</td>
			<td>オブジェクトを探索する方向を指定。
			詳しくは後述する。</td>
			<td></td>
		</tr>
		<tr>
			<td>index</td>
			<td>indexを指定</td>
			<td></td>
		</tr>
		<tr>
			<td>offset</td>
			<td>offset分、最初のオブジェクトを飛ばして取得。</td>
			<td>0</td>
		</tr>
		<tr>
			<td>limit</td>
			<td>取得する最大数。</td>
			<td></td>
		</tr>
		<tr>
			<td>count</td>
			<td>trueの場合、取得したオブジェクトの数を返す。</td>
			<td>false</td>
		</tr>
	</tbody>
</table>

## Gavia.Store.direction

Gavia.Store.directionはオブジェクトストアの探索方向を指定するものです。  
探索方向は昇順、重複なし昇順、降順、重複なし降順の４つがあります。  

<table class="report">
	<thead>
		<tr>
			<th>名前</th>
			<th>概要</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>Gavia.Store.direction.next</td>
			<td>昇順</td>
		</tr>
		<tr>
			<td>Gavia.Store.direction.nextunique</td>
			<td>重複なし昇順</td>
		</tr>
		<tr>
			<td>Gavia.Store.direction.prev</td>
			<td>降順</td>
		</tr>
		<tr>
			<td>Gavia.Store.direction.prevunique</td>
			<td>重複なし降順</td>
		</tr>
	</tbody>
</table>

## サンプル
```
// gaviaStoreObject に 1 ~ 9のkeyを持つオブジェクトが存在すると仮定。
gaviaStoreObject.bound(2, 8).done(function(results) {
	console.log(results); // 2 ~ 8
});

gaviaStoreObject.bound(2, 8, {
	direction: Gavia.Store.direction.prev
}).done(function(results) {
	console.log(results); // 8 ~ 2
});

gaviaStoreObject.bound(2, 8, {
	offset: 2,
	limit: 2
}).done(function(results) {
	console.log(results); // 4 ~ 6
});

gaviaStoreObject.bound(2, 8, {
	count: true
}).done(function(count) {
	console.log(count); // 7
});
```
