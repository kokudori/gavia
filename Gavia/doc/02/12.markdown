---
out: store-fn-upper.html
---

# upper
lower <= key となるオブジェクトを全て取得。

<a href="store-fn-upperThan.html">upperThan</a>とは違い、境界を**含む**。

## シグネチャ
```
deferred = gaviaStoreObject.upper(lower, {
	direction: Gavia.Store.direction,  // optional
	index: 'indexName',                // optional
	offset: Number,                    // optional
	limit: Number,                     // optional
	count: Boolean                     // optional
});
```

## パラメータ
<table class="report">
	<thead>
		<tr>
			<th>名前</th>
			<th>概要</th>
			<th>デフォルト値</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>lower</td>
			<td>lower**以上**となるkeyを持つオブジェクトを取得する。</td>
			<td>省略不可。</td>
		<tr>
		<tr>
			<td>direction</td>
			<td>オブジェクトを探索する方向を指定。
			詳しくは<a href="store-fn-bound.html#Gavia.Store.direction">Gavia.Store.direction</a>を参照。
			</td>
			<td></td>
		</tr>
		<tr>
			<td>index</td>
			<td>indexを指定</td>
			<td></td>
		</tr>
		<tr>
			<td>offset</td>
			<td>offset分、最初のオブジェクトを飛ばして取得。</td>
			<td>0</td>
		</tr>
		<tr>
			<td>limit</td>
			<td>取得する最大数。</td>
			<td></td>
		</tr>
		<tr>
			<td>count</td>
			<td>trueの場合、取得したオブジェクトの数を返す。</td>
			<td>false</td>
		</tr>
	</tbody>
</table>

## サンプル
```
// gaviaStoreObject に 1 ~ 9のkeyを持つオブジェクトが存在すると仮定。
gaviaStoreObject.upper(4).done(function(results) {
	console.log(results); // 4 ~ 9
});

gaviaStoreObject.upper(4, {
	direction: Gavia.Store.direction.prev
}).done(function(results) {
	console.log(results); // 9 ~ 4
});

gaviaStoreObject.upper(4, {
	offset: 2,
	limit: 2
}).done(function(results) {
	console.log(results); // 6 ~ 8
});

gaviaStoreObject.upper(4, {
	count: true
}).done(function(count) {
	console.log(count); // 6
});
```
